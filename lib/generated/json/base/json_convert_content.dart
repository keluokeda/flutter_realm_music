// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_realm_music/api/response/album_detail_entity.dart';
import 'package:flutter_realm_music/api/response/album_dynamic_entity.dart';
import 'package:flutter_realm_music/api/response/artist_album_entity.dart';
import 'package:flutter_realm_music/api/response/artist_desc_entity.dart';
import 'package:flutter_realm_music/api/response/artist_detail_entity.dart';
import 'package:flutter_realm_music/api/response/artist_mv_entity.dart';
import 'package:flutter_realm_music/api/response/login_status_entity.dart';
import 'package:flutter_realm_music/api/response/playlist_detail_entity.dart';
import 'package:flutter_realm_music/api/response/playlist_tracks_entity.dart';
import 'package:flutter_realm_music/api/response/recommend_songs_entity.dart';
import 'package:flutter_realm_music/api/response/song_url_entity.dart';
import 'package:flutter_realm_music/api/response/user_playlists_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
  static Map<String, JsonConvertFunction> get convertFuncMap =>
      {
        (AlbumDetailEntity).toString(): AlbumDetailEntity.fromJson,
        (AlbumDetailSongs).toString(): AlbumDetailSongs.fromJson,
        (AlbumDetailSongsAr).toString(): AlbumDetailSongsAr.fromJson,
        (AlbumDetailSongsAl).toString(): AlbumDetailSongsAl.fromJson,
        (AlbumDetailSongsH).toString(): AlbumDetailSongsH.fromJson,
        (AlbumDetailSongsSq).toString(): AlbumDetailSongsSq.fromJson,
        (AlbumDetailSongsL).toString(): AlbumDetailSongsL.fromJson,
        (AlbumDetailSongsM).toString(): AlbumDetailSongsM.fromJson,
        (AlbumDetailSongsPrivilege).toString(): AlbumDetailSongsPrivilege
            .fromJson,
        (AlbumDetailSongsPrivilegeFreeTrialPrivilege)
            .toString(): AlbumDetailSongsPrivilegeFreeTrialPrivilege.fromJson,
        (AlbumDetailSongsPrivilegeChargeInfoList)
            .toString(): AlbumDetailSongsPrivilegeChargeInfoList.fromJson,
        (AlbumDetailAlbum).toString(): AlbumDetailAlbum.fromJson,
        (AlbumDetailAlbumArtists).toString(): AlbumDetailAlbumArtists.fromJson,
        (AlbumDetailAlbumArtist).toString(): AlbumDetailAlbumArtist.fromJson,
        (AlbumDetailAlbumInfo).toString(): AlbumDetailAlbumInfo.fromJson,
        (AlbumDetailAlbumInfoCommentThread)
            .toString(): AlbumDetailAlbumInfoCommentThread.fromJson,
        (AlbumDetailAlbumInfoCommentThreadResourceInfo)
            .toString(): AlbumDetailAlbumInfoCommentThreadResourceInfo.fromJson,
        (AlbumDynamicEntity).toString(): AlbumDynamicEntity.fromJson,
        (ArtistAlbumEntity).toString(): ArtistAlbumEntity.fromJson,
        (ArtistAlbumArtist).toString(): ArtistAlbumArtist.fromJson,
        (ArtistAlbumHotAlbums).toString(): ArtistAlbumHotAlbums.fromJson,
        (ArtistAlbumHotAlbumsArtists).toString(): ArtistAlbumHotAlbumsArtists
            .fromJson,
        (ArtistAlbumHotAlbumsArtist).toString(): ArtistAlbumHotAlbumsArtist
            .fromJson,
        (ArtistDescEntity).toString(): ArtistDescEntity.fromJson,
        (ArtistDescIntroduction).toString(): ArtistDescIntroduction.fromJson,
        (ArtistDetailEntity).toString(): ArtistDetailEntity.fromJson,
        (ArtistDetailArtist).toString(): ArtistDetailArtist.fromJson,
        (ArtistDetailHotSongs).toString(): ArtistDetailHotSongs.fromJson,
        (ArtistDetailHotSongsAr).toString(): ArtistDetailHotSongsAr.fromJson,
        (ArtistDetailHotSongsAl).toString(): ArtistDetailHotSongsAl.fromJson,
        (ArtistDetailHotSongsH).toString(): ArtistDetailHotSongsH.fromJson,
        (ArtistDetailHotSongsSq).toString(): ArtistDetailHotSongsSq.fromJson,
        (ArtistDetailHotSongsHr).toString(): ArtistDetailHotSongsHr.fromJson,
        (ArtistDetailHotSongsL).toString(): ArtistDetailHotSongsL.fromJson,
        (ArtistDetailHotSongsM).toString(): ArtistDetailHotSongsM.fromJson,
        (ArtistDetailHotSongsPrivilege)
            .toString(): ArtistDetailHotSongsPrivilege.fromJson,
        (ArtistDetailHotSongsPrivilegeFreeTrialPrivilege)
            .toString(): ArtistDetailHotSongsPrivilegeFreeTrialPrivilege
            .fromJson,
        (ArtistDetailHotSongsPrivilegeChargeInfoList)
            .toString(): ArtistDetailHotSongsPrivilegeChargeInfoList.fromJson,
        (ArtistMvEntity).toString(): ArtistMvEntity.fromJson,
        (ArtistMvMvs).toString(): ArtistMvMvs.fromJson,
        (ArtistMvMvsArtist).toString(): ArtistMvMvsArtist.fromJson,
        (LoginStatusEntity).toString(): LoginStatusEntity.fromJson,
        (LoginStatusData).toString(): LoginStatusData.fromJson,
        (LoginStatusDataAccount).toString(): LoginStatusDataAccount.fromJson,
        (LoginStatusDataProfile).toString(): LoginStatusDataProfile.fromJson,
        (PlaylistDetailEntity).toString(): PlaylistDetailEntity.fromJson,
        (PlaylistDetailPlaylist).toString(): PlaylistDetailPlaylist.fromJson,
        (PlaylistDetailPlaylistCreator)
            .toString(): PlaylistDetailPlaylistCreator.fromJson,
        (PlaylistDetailPlaylistTracks).toString(): PlaylistDetailPlaylistTracks
            .fromJson,
        (PlaylistDetailPlaylistTracksAr)
            .toString(): PlaylistDetailPlaylistTracksAr.fromJson,
        (PlaylistDetailPlaylistTracksAl)
            .toString(): PlaylistDetailPlaylistTracksAl.fromJson,
        (PlaylistDetailPlaylistTracksH)
            .toString(): PlaylistDetailPlaylistTracksH.fromJson,
        (PlaylistDetailPlaylistTracksM)
            .toString(): PlaylistDetailPlaylistTracksM.fromJson,
        (PlaylistDetailPlaylistTracksL)
            .toString(): PlaylistDetailPlaylistTracksL.fromJson,
        (PlaylistDetailPlaylistTracksSq)
            .toString(): PlaylistDetailPlaylistTracksSq.fromJson,
        (PlaylistDetailPlaylistTracksHr)
            .toString(): PlaylistDetailPlaylistTracksHr.fromJson,
        (PlaylistDetailPlaylistTrackIds)
            .toString(): PlaylistDetailPlaylistTrackIds.fromJson,
        (PlaylistDetailPrivileges).toString(): PlaylistDetailPrivileges
            .fromJson,
        (PlaylistDetailPrivilegesFreeTrialPrivilege)
            .toString(): PlaylistDetailPrivilegesFreeTrialPrivilege.fromJson,
        (PlaylistDetailPrivilegesChargeInfoList)
            .toString(): PlaylistDetailPrivilegesChargeInfoList.fromJson,
        (PlaylistTracksEntity).toString(): PlaylistTracksEntity.fromJson,
        (PlaylistTracksSongs).toString(): PlaylistTracksSongs.fromJson,
        (PlaylistTracksSongsAr).toString(): PlaylistTracksSongsAr.fromJson,
        (PlaylistTracksSongsAl).toString(): PlaylistTracksSongsAl.fromJson,
        (PlaylistTracksSongsH).toString(): PlaylistTracksSongsH.fromJson,
        (PlaylistTracksSongsM).toString(): PlaylistTracksSongsM.fromJson,
        (PlaylistTracksSongsL).toString(): PlaylistTracksSongsL.fromJson,
        (PlaylistTracksSongsSq).toString(): PlaylistTracksSongsSq.fromJson,
        (PlaylistTracksSongsHr).toString(): PlaylistTracksSongsHr.fromJson,
        (PlaylistTracksPrivileges).toString(): PlaylistTracksPrivileges
            .fromJson,
        (PlaylistTracksPrivilegesFreeTrialPrivilege)
            .toString(): PlaylistTracksPrivilegesFreeTrialPrivilege.fromJson,
        (PlaylistTracksPrivilegesChargeInfoList)
            .toString(): PlaylistTracksPrivilegesChargeInfoList.fromJson,
        (RecommendSongsEntity).toString(): RecommendSongsEntity.fromJson,
        (RecommendSongsData).toString(): RecommendSongsData.fromJson,
        (RecommendSongsDataDailySongs).toString(): RecommendSongsDataDailySongs
            .fromJson,
        (RecommendSongsDataDailySongsAr)
            .toString(): RecommendSongsDataDailySongsAr.fromJson,
        (RecommendSongsDataDailySongsAl)
            .toString(): RecommendSongsDataDailySongsAl.fromJson,
        (RecommendSongsDataDailySongsH)
            .toString(): RecommendSongsDataDailySongsH.fromJson,
        (RecommendSongsDataDailySongsM)
            .toString(): RecommendSongsDataDailySongsM.fromJson,
        (RecommendSongsDataDailySongsL)
            .toString(): RecommendSongsDataDailySongsL.fromJson,
        (RecommendSongsDataDailySongsSq)
            .toString(): RecommendSongsDataDailySongsSq.fromJson,
        (RecommendSongsDataDailySongsHr)
            .toString(): RecommendSongsDataDailySongsHr.fromJson,
        (RecommendSongsDataDailySongsPrivilege)
            .toString(): RecommendSongsDataDailySongsPrivilege.fromJson,
        (RecommendSongsDataDailySongsPrivilegeFreeTrialPrivilege)
            .toString(): RecommendSongsDataDailySongsPrivilegeFreeTrialPrivilege
            .fromJson,
        (RecommendSongsDataDailySongsPrivilegeChargeInfoList)
            .toString(): RecommendSongsDataDailySongsPrivilegeChargeInfoList
            .fromJson,
        (RecommendSongsDataRecommendReasons)
            .toString(): RecommendSongsDataRecommendReasons.fromJson,
        (SongUrlEntity).toString(): SongUrlEntity.fromJson,
        (SongUrlData).toString(): SongUrlData.fromJson,
        (SongUrlDataFreeTrialPrivilege)
            .toString(): SongUrlDataFreeTrialPrivilege.fromJson,
        (SongUrlDataFreeTimeTrialPrivilege)
            .toString(): SongUrlDataFreeTimeTrialPrivilege.fromJson,
        (UserPlaylistsEntity).toString(): UserPlaylistsEntity.fromJson,
        (UserPlaylistsPlaylist).toString(): UserPlaylistsPlaylist.fromJson,
        (UserPlaylistsPlaylistCreator).toString(): UserPlaylistsPlaylistCreator
            .fromJson,
      };

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AlbumDetailEntity>[] is M) {
      return data.map<AlbumDetailEntity>((Map<String, dynamic> e) =>
          AlbumDetailEntity.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailSongs>[] is M) {
      return data.map<AlbumDetailSongs>((Map<String, dynamic> e) =>
          AlbumDetailSongs.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailSongsAr>[] is M) {
      return data.map<AlbumDetailSongsAr>((Map<String, dynamic> e) =>
          AlbumDetailSongsAr.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailSongsAl>[] is M) {
      return data.map<AlbumDetailSongsAl>((Map<String, dynamic> e) =>
          AlbumDetailSongsAl.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailSongsH>[] is M) {
      return data.map<AlbumDetailSongsH>((Map<String, dynamic> e) =>
          AlbumDetailSongsH.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailSongsSq>[] is M) {
      return data.map<AlbumDetailSongsSq>((Map<String, dynamic> e) =>
          AlbumDetailSongsSq.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailSongsL>[] is M) {
      return data.map<AlbumDetailSongsL>((Map<String, dynamic> e) =>
          AlbumDetailSongsL.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailSongsM>[] is M) {
      return data.map<AlbumDetailSongsM>((Map<String, dynamic> e) =>
          AlbumDetailSongsM.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailSongsPrivilege>[] is M) {
      return data.map<AlbumDetailSongsPrivilege>((Map<String, dynamic> e) =>
          AlbumDetailSongsPrivilege.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailSongsPrivilegeFreeTrialPrivilege>[] is M) {
      return data.map<AlbumDetailSongsPrivilegeFreeTrialPrivilege>((
          Map<String, dynamic> e) =>
          AlbumDetailSongsPrivilegeFreeTrialPrivilege.fromJson(e))
          .toList() as M;
    }
    if (<AlbumDetailSongsPrivilegeChargeInfoList>[] is M) {
      return data.map<AlbumDetailSongsPrivilegeChargeInfoList>((
          Map<String, dynamic> e) =>
          AlbumDetailSongsPrivilegeChargeInfoList.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailAlbum>[] is M) {
      return data.map<AlbumDetailAlbum>((Map<String, dynamic> e) =>
          AlbumDetailAlbum.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailAlbumArtists>[] is M) {
      return data.map<AlbumDetailAlbumArtists>((Map<String, dynamic> e) =>
          AlbumDetailAlbumArtists.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailAlbumArtist>[] is M) {
      return data.map<AlbumDetailAlbumArtist>((Map<String, dynamic> e) =>
          AlbumDetailAlbumArtist.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailAlbumInfo>[] is M) {
      return data.map<AlbumDetailAlbumInfo>((Map<String, dynamic> e) =>
          AlbumDetailAlbumInfo.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailAlbumInfoCommentThread>[] is M) {
      return data.map<AlbumDetailAlbumInfoCommentThread>((
          Map<String, dynamic> e) =>
          AlbumDetailAlbumInfoCommentThread.fromJson(e)).toList() as M;
    }
    if (<AlbumDetailAlbumInfoCommentThreadResourceInfo>[] is M) {
      return data.map<AlbumDetailAlbumInfoCommentThreadResourceInfo>((
          Map<String, dynamic> e) =>
          AlbumDetailAlbumInfoCommentThreadResourceInfo.fromJson(e))
          .toList() as M;
    }
    if (<AlbumDynamicEntity>[] is M) {
      return data.map<AlbumDynamicEntity>((Map<String, dynamic> e) =>
          AlbumDynamicEntity.fromJson(e)).toList() as M;
    }
    if (<ArtistAlbumEntity>[] is M) {
      return data.map<ArtistAlbumEntity>((Map<String, dynamic> e) =>
          ArtistAlbumEntity.fromJson(e)).toList() as M;
    }
    if (<ArtistAlbumArtist>[] is M) {
      return data.map<ArtistAlbumArtist>((Map<String, dynamic> e) =>
          ArtistAlbumArtist.fromJson(e)).toList() as M;
    }
    if (<ArtistAlbumHotAlbums>[] is M) {
      return data.map<ArtistAlbumHotAlbums>((Map<String, dynamic> e) =>
          ArtistAlbumHotAlbums.fromJson(e)).toList() as M;
    }
    if (<ArtistAlbumHotAlbumsArtists>[] is M) {
      return data.map<ArtistAlbumHotAlbumsArtists>((Map<String, dynamic> e) =>
          ArtistAlbumHotAlbumsArtists.fromJson(e)).toList() as M;
    }
    if (<ArtistAlbumHotAlbumsArtist>[] is M) {
      return data.map<ArtistAlbumHotAlbumsArtist>((Map<String, dynamic> e) =>
          ArtistAlbumHotAlbumsArtist.fromJson(e)).toList() as M;
    }
    if (<ArtistDescEntity>[] is M) {
      return data.map<ArtistDescEntity>((Map<String, dynamic> e) =>
          ArtistDescEntity.fromJson(e)).toList() as M;
    }
    if (<ArtistDescIntroduction>[] is M) {
      return data.map<ArtistDescIntroduction>((Map<String, dynamic> e) =>
          ArtistDescIntroduction.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailEntity>[] is M) {
      return data.map<ArtistDetailEntity>((Map<String, dynamic> e) =>
          ArtistDetailEntity.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailArtist>[] is M) {
      return data.map<ArtistDetailArtist>((Map<String, dynamic> e) =>
          ArtistDetailArtist.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongs>[] is M) {
      return data.map<ArtistDetailHotSongs>((Map<String, dynamic> e) =>
          ArtistDetailHotSongs.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongsAr>[] is M) {
      return data.map<ArtistDetailHotSongsAr>((Map<String, dynamic> e) =>
          ArtistDetailHotSongsAr.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongsAl>[] is M) {
      return data.map<ArtistDetailHotSongsAl>((Map<String, dynamic> e) =>
          ArtistDetailHotSongsAl.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongsH>[] is M) {
      return data.map<ArtistDetailHotSongsH>((Map<String, dynamic> e) =>
          ArtistDetailHotSongsH.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongsSq>[] is M) {
      return data.map<ArtistDetailHotSongsSq>((Map<String, dynamic> e) =>
          ArtistDetailHotSongsSq.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongsHr>[] is M) {
      return data.map<ArtistDetailHotSongsHr>((Map<String, dynamic> e) =>
          ArtistDetailHotSongsHr.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongsL>[] is M) {
      return data.map<ArtistDetailHotSongsL>((Map<String, dynamic> e) =>
          ArtistDetailHotSongsL.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongsM>[] is M) {
      return data.map<ArtistDetailHotSongsM>((Map<String, dynamic> e) =>
          ArtistDetailHotSongsM.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongsPrivilege>[] is M) {
      return data.map<ArtistDetailHotSongsPrivilege>((Map<String, dynamic> e) =>
          ArtistDetailHotSongsPrivilege.fromJson(e)).toList() as M;
    }
    if (<ArtistDetailHotSongsPrivilegeFreeTrialPrivilege>[] is M) {
      return data.map<ArtistDetailHotSongsPrivilegeFreeTrialPrivilege>((
          Map<String, dynamic> e) =>
          ArtistDetailHotSongsPrivilegeFreeTrialPrivilege.fromJson(e))
          .toList() as M;
    }
    if (<ArtistDetailHotSongsPrivilegeChargeInfoList>[] is M) {
      return data.map<ArtistDetailHotSongsPrivilegeChargeInfoList>((
          Map<String, dynamic> e) =>
          ArtistDetailHotSongsPrivilegeChargeInfoList.fromJson(e))
          .toList() as M;
    }
    if (<ArtistMvEntity>[] is M) {
      return data.map<ArtistMvEntity>((Map<String, dynamic> e) =>
          ArtistMvEntity.fromJson(e)).toList() as M;
    }
    if (<ArtistMvMvs>[] is M) {
      return data.map<ArtistMvMvs>((Map<String, dynamic> e) =>
          ArtistMvMvs.fromJson(e)).toList() as M;
    }
    if (<ArtistMvMvsArtist>[] is M) {
      return data.map<ArtistMvMvsArtist>((Map<String, dynamic> e) =>
          ArtistMvMvsArtist.fromJson(e)).toList() as M;
    }
    if (<LoginStatusEntity>[] is M) {
      return data.map<LoginStatusEntity>((Map<String, dynamic> e) =>
          LoginStatusEntity.fromJson(e)).toList() as M;
    }
    if (<LoginStatusData>[] is M) {
      return data.map<LoginStatusData>((Map<String, dynamic> e) =>
          LoginStatusData.fromJson(e)).toList() as M;
    }
    if (<LoginStatusDataAccount>[] is M) {
      return data.map<LoginStatusDataAccount>((Map<String, dynamic> e) =>
          LoginStatusDataAccount.fromJson(e)).toList() as M;
    }
    if (<LoginStatusDataProfile>[] is M) {
      return data.map<LoginStatusDataProfile>((Map<String, dynamic> e) =>
          LoginStatusDataProfile.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailEntity>[] is M) {
      return data.map<PlaylistDetailEntity>((Map<String, dynamic> e) =>
          PlaylistDetailEntity.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylist>[] is M) {
      return data.map<PlaylistDetailPlaylist>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylist.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistCreator>[] is M) {
      return data.map<PlaylistDetailPlaylistCreator>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistCreator.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracks>[] is M) {
      return data.map<PlaylistDetailPlaylistTracks>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracks.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksAr>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksAr>((
          Map<String, dynamic> e) => PlaylistDetailPlaylistTracksAr.fromJson(e))
          .toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksAl>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksAl>((
          Map<String, dynamic> e) => PlaylistDetailPlaylistTracksAl.fromJson(e))
          .toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksH>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksH>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksH.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksM>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksM>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksM.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksL>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksL>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksL.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksSq>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksSq>((
          Map<String, dynamic> e) => PlaylistDetailPlaylistTracksSq.fromJson(e))
          .toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksHr>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksHr>((
          Map<String, dynamic> e) => PlaylistDetailPlaylistTracksHr.fromJson(e))
          .toList() as M;
    }
    if (<PlaylistDetailPlaylistTrackIds>[] is M) {
      return data.map<PlaylistDetailPlaylistTrackIds>((
          Map<String, dynamic> e) => PlaylistDetailPlaylistTrackIds.fromJson(e))
          .toList() as M;
    }
    if (<PlaylistDetailPrivileges>[] is M) {
      return data.map<PlaylistDetailPrivileges>((Map<String, dynamic> e) =>
          PlaylistDetailPrivileges.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPrivilegesFreeTrialPrivilege>[] is M) {
      return data.map<PlaylistDetailPrivilegesFreeTrialPrivilege>((
          Map<String, dynamic> e) =>
          PlaylistDetailPrivilegesFreeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPrivilegesChargeInfoList>[] is M) {
      return data.map<PlaylistDetailPrivilegesChargeInfoList>((
          Map<String, dynamic> e) =>
          PlaylistDetailPrivilegesChargeInfoList.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksEntity>[] is M) {
      return data.map<PlaylistTracksEntity>((Map<String, dynamic> e) =>
          PlaylistTracksEntity.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksSongs>[] is M) {
      return data.map<PlaylistTracksSongs>((Map<String, dynamic> e) =>
          PlaylistTracksSongs.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksSongsAr>[] is M) {
      return data.map<PlaylistTracksSongsAr>((Map<String, dynamic> e) =>
          PlaylistTracksSongsAr.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksSongsAl>[] is M) {
      return data.map<PlaylistTracksSongsAl>((Map<String, dynamic> e) =>
          PlaylistTracksSongsAl.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksSongsH>[] is M) {
      return data.map<PlaylistTracksSongsH>((Map<String, dynamic> e) =>
          PlaylistTracksSongsH.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksSongsM>[] is M) {
      return data.map<PlaylistTracksSongsM>((Map<String, dynamic> e) =>
          PlaylistTracksSongsM.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksSongsL>[] is M) {
      return data.map<PlaylistTracksSongsL>((Map<String, dynamic> e) =>
          PlaylistTracksSongsL.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksSongsSq>[] is M) {
      return data.map<PlaylistTracksSongsSq>((Map<String, dynamic> e) =>
          PlaylistTracksSongsSq.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksSongsHr>[] is M) {
      return data.map<PlaylistTracksSongsHr>((Map<String, dynamic> e) =>
          PlaylistTracksSongsHr.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksPrivileges>[] is M) {
      return data.map<PlaylistTracksPrivileges>((Map<String, dynamic> e) =>
          PlaylistTracksPrivileges.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksPrivilegesFreeTrialPrivilege>[] is M) {
      return data.map<PlaylistTracksPrivilegesFreeTrialPrivilege>((
          Map<String, dynamic> e) =>
          PlaylistTracksPrivilegesFreeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<PlaylistTracksPrivilegesChargeInfoList>[] is M) {
      return data.map<PlaylistTracksPrivilegesChargeInfoList>((
          Map<String, dynamic> e) =>
          PlaylistTracksPrivilegesChargeInfoList.fromJson(e)).toList() as M;
    }
    if (<RecommendSongsEntity>[] is M) {
      return data.map<RecommendSongsEntity>((Map<String, dynamic> e) =>
          RecommendSongsEntity.fromJson(e)).toList() as M;
    }
    if (<RecommendSongsData>[] is M) {
      return data.map<RecommendSongsData>((Map<String, dynamic> e) =>
          RecommendSongsData.fromJson(e)).toList() as M;
    }
    if (<RecommendSongsDataDailySongs>[] is M) {
      return data.map<RecommendSongsDataDailySongs>((Map<String, dynamic> e) =>
          RecommendSongsDataDailySongs.fromJson(e)).toList() as M;
    }
    if (<RecommendSongsDataDailySongsAr>[] is M) {
      return data.map<RecommendSongsDataDailySongsAr>((
          Map<String, dynamic> e) => RecommendSongsDataDailySongsAr.fromJson(e))
          .toList() as M;
    }
    if (<RecommendSongsDataDailySongsAl>[] is M) {
      return data.map<RecommendSongsDataDailySongsAl>((
          Map<String, dynamic> e) => RecommendSongsDataDailySongsAl.fromJson(e))
          .toList() as M;
    }
    if (<RecommendSongsDataDailySongsH>[] is M) {
      return data.map<RecommendSongsDataDailySongsH>((Map<String, dynamic> e) =>
          RecommendSongsDataDailySongsH.fromJson(e)).toList() as M;
    }
    if (<RecommendSongsDataDailySongsM>[] is M) {
      return data.map<RecommendSongsDataDailySongsM>((Map<String, dynamic> e) =>
          RecommendSongsDataDailySongsM.fromJson(e)).toList() as M;
    }
    if (<RecommendSongsDataDailySongsL>[] is M) {
      return data.map<RecommendSongsDataDailySongsL>((Map<String, dynamic> e) =>
          RecommendSongsDataDailySongsL.fromJson(e)).toList() as M;
    }
    if (<RecommendSongsDataDailySongsSq>[] is M) {
      return data.map<RecommendSongsDataDailySongsSq>((
          Map<String, dynamic> e) => RecommendSongsDataDailySongsSq.fromJson(e))
          .toList() as M;
    }
    if (<RecommendSongsDataDailySongsHr>[] is M) {
      return data.map<RecommendSongsDataDailySongsHr>((
          Map<String, dynamic> e) => RecommendSongsDataDailySongsHr.fromJson(e))
          .toList() as M;
    }
    if (<RecommendSongsDataDailySongsPrivilege>[] is M) {
      return data.map<RecommendSongsDataDailySongsPrivilege>((
          Map<String, dynamic> e) =>
          RecommendSongsDataDailySongsPrivilege.fromJson(e)).toList() as M;
    }
    if (<RecommendSongsDataDailySongsPrivilegeFreeTrialPrivilege>[] is M) {
      return data.map<RecommendSongsDataDailySongsPrivilegeFreeTrialPrivilege>((
          Map<String, dynamic> e) =>
          RecommendSongsDataDailySongsPrivilegeFreeTrialPrivilege.fromJson(e))
          .toList() as M;
    }
    if (<RecommendSongsDataDailySongsPrivilegeChargeInfoList>[] is M) {
      return data.map<RecommendSongsDataDailySongsPrivilegeChargeInfoList>((
          Map<String, dynamic> e) =>
          RecommendSongsDataDailySongsPrivilegeChargeInfoList.fromJson(e))
          .toList() as M;
    }
    if (<RecommendSongsDataRecommendReasons>[] is M) {
      return data.map<RecommendSongsDataRecommendReasons>((
          Map<String, dynamic> e) =>
          RecommendSongsDataRecommendReasons.fromJson(e)).toList() as M;
    }
    if (<SongUrlEntity>[] is M) {
      return data.map<SongUrlEntity>((Map<String, dynamic> e) =>
          SongUrlEntity.fromJson(e)).toList() as M;
    }
    if (<SongUrlData>[] is M) {
      return data.map<SongUrlData>((Map<String, dynamic> e) =>
          SongUrlData.fromJson(e)).toList() as M;
    }
    if (<SongUrlDataFreeTrialPrivilege>[] is M) {
      return data.map<SongUrlDataFreeTrialPrivilege>((Map<String, dynamic> e) =>
          SongUrlDataFreeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<SongUrlDataFreeTimeTrialPrivilege>[] is M) {
      return data.map<SongUrlDataFreeTimeTrialPrivilege>((
          Map<String, dynamic> e) =>
          SongUrlDataFreeTimeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<UserPlaylistsEntity>[] is M) {
      return data.map<UserPlaylistsEntity>((Map<String, dynamic> e) =>
          UserPlaylistsEntity.fromJson(e)).toList() as M;
    }
    if (<UserPlaylistsPlaylist>[] is M) {
      return data.map<UserPlaylistsPlaylist>((Map<String, dynamic> e) =>
          UserPlaylistsPlaylist.fromJson(e)).toList() as M;
    }
    if (<UserPlaylistsPlaylistCreator>[] is M) {
      return data.map<UserPlaylistsPlaylistCreator>((Map<String, dynamic> e) =>
          UserPlaylistsPlaylistCreator.fromJson(e)).toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}